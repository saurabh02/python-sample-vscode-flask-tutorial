# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

# Pipeline-level variables
variables:
  package: hello_app
  distDirectory: dist
  testsDirectory: tests

trigger:
- master
- releases/*
- develop

stages:

- stage: Build

  jobs:

  - job: BuildJob

    pool:
      vmImage: ubuntu-latest

    steps:

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        disableDownloadFromRegistry: true # boolean. Disable downloading releases from the GitHub registry. Default: false.
        #allowUnstable: false # boolean. Optional. Use when disableDownloadFromRegistry = false. Allow downloading unstable releases. Default: false.
        #githubToken: # string. Optional. Use when disableDownloadFromRegistry = false. GitHub token for GitHub Actions python registry. 
        addToPath: true # boolean. Required. Add to PATH. Default: true.
      # Advanced
        architecture: 'x64' # 'x86' | 'x64'. Required. Architecture. Default: x64.
      displayName: 'Use Python 3.x'

    # Install some tools needed for build
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install dependencies'

    # Lint via pylint. We need to find all .py files and run pylint to avoid errors
    - bash: find . -type f -name "*.py" | xargs pylint
      displayName: "Linting"

    # Run tests
    - bash: pytest --cov=.
      displayName: 'Run tests'
      workingDirectory: $(testsDirectory)

    # Our built source dist & wheel will land in dist
    - bash: python setup.py sdist bdist_wheel
      displayName: Build package

    # Upload everything in dist (including subfolders) to the build artifacts for later use or debugging
    - task: PublishPipelineArtifact@0
      displayName: Publish artifacts
      inputs:
        artifactName: $(package)
        targetPath: dist

- stage: Publish

  jobs:

  - job: PublishJob

    pool:
      vmImage: ubuntu-latest

    # We want to wait for all Build Jobs to complete before running the Publish Job
    dependsOn: Build

    # Only publish when the previous Jobs are successful and we're building the master branch
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

    steps:

    # Explicitly disable source checkout to keep a pristine environment for publishing
    - checkout: none
